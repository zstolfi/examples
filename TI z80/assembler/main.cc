#include "byte literals.hh"
#include <filesystem>
#include <iostream>
#include <fstream>
#include <string>
namespace fls = std::filesystem;
using namespace std::literals;

void printStatus (const char*);
void printWarning(const char*);
void printError  (const char*);



struct Arguments {
	fls::path sourcePath;
	fls::path outputPath;
	std::ifstream sourceStream;
	std::ofstream outputStream;

	Arguments(int argc, char* argv[]) {
		for (int i=1; i<argc; i++) {
			if (argv[i][0] != '-') { printError("unexpected cmd arg"); }
			char flag = argv[i++][1];
			if (i >= argc || argv[i][0] == '-') { printError("missing cmd arg"); }

			/**/ if (flag == 'i') { sourcePath = argv[i], hasSource = true; }
			else if (flag == 'o') { outputPath = argv[i], hasOutput = true; }
			else    { printError("unknown cmd flag"); }
		}
		if (!hasSource) { sourceStream = std::ifstream(sourcePath  /*            */); }
		if (!hasOutput) { outputStream = std::ofstream(outputPath, std::ios::binary); }
	}

	std::istream& getSource() { return hasSource ? sourceStream : std::cin ; }
	std::ostream& getOutput() { return hasOutput ? outputStream : std::cout; }
};

int main(int argc, char* argv[]) {
	auto args = Arguments(argc, argv);
	auto& source = args.getSource();
	auto& output = args.getOutput();
	// if (!args.hasOutput) { printWarning("0x0a may output incorrectly"); }

	/* preprocess */
	/* lex */
	/* parse */
	std::vector<std::byte> byteCode = { 0xC9 };

	// Output .8xp file    (http://merthsoft.com/linkguide/ti83+/fformat.html)
	output << Bytes<11>("**TI83F*\x1a\x0a");
	output << Bytes<42>("Generated By Zander Stolfi");
	output << AsBytes<Word>(byteCode.size() + 19);
	output << AsBytes(0x0d, 0x00);
	output << AsBytes<Word>(byteCode.size() + 2 );
	output << AsBytes(6);
	output << Bytes<8>("TESTPGRM");
	output << AsBytes(0x00, 0x00);
	output << AsBytes<Word>(byteCode.size() + 2 );
	output << AsBytes<Word>(byteCode.size()     );
	output << byteCode;
	output << AsBytes<Word>(checksum);
}



void printStatus (const char* msg) { std::cout                 << msg; }
void printWarning(const char* msg) { std::cout << "Warning:\t" << msg; }
void printError  (const char* msg) { std::cout << "Error  :\t" << msg; exit(1); }