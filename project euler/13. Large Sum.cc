#include <iostream>
#include <array>
#include <vector>
#include <string_view>
#include <algorithm>
#include <numeric>

using Digit = unsigned char;
struct Decimal : std::vector<Digit> {
	Decimal() {}
	Decimal(std::string_view str) {
		while (!str.empty() && str[0] == '0') str.remove_prefix(1);
		for (auto i=str.size(); i-- > 0; ) push_back(str[i] - '0');
	}
};

const std::array<Decimal, 100> data {
	Decimal {"37107287533902102798797998220837590246510135740250"},
	Decimal {"46376937677490009712648124896970078050417018260538"},
	Decimal {"74324986199524741059474233309513058123726617309629"},
	Decimal {"91942213363574161572522430563301811072406154908250"},
	Decimal {"23067588207539346171171980310421047513778063246676"},
	Decimal {"89261670696623633820136378418383684178734361726757"},
	Decimal {"28112879812849979408065481931592621691275889832738"},
	Decimal {"44274228917432520321923589422876796487670272189318"},
	Decimal {"47451445736001306439091167216856844588711603153276"},
	Decimal {"70386486105843025439939619828917593665686757934951"},
	Decimal {"62176457141856560629502157223196586755079324193331"},
	Decimal {"64906352462741904929101432445813822663347944758178"},
	Decimal {"92575867718337217661963751590579239728245598838407"},
	Decimal {"58203565325359399008402633568948830189458628227828"},
	Decimal {"80181199384826282014278194139940567587151170094390"},
	Decimal {"35398664372827112653829987240784473053190104293586"},
	Decimal {"86515506006295864861532075273371959191420517255829"},
	Decimal {"71693888707715466499115593487603532921714970056938"},
	Decimal {"54370070576826684624621495650076471787294438377604"},
	Decimal {"53282654108756828443191190634694037855217779295145"},
	Decimal {"36123272525000296071075082563815656710885258350721"},
	Decimal {"45876576172410976447339110607218265236877223636045"},
	Decimal {"17423706905851860660448207621209813287860733969412"},
	Decimal {"81142660418086830619328460811191061556940512689692"},
	Decimal {"51934325451728388641918047049293215058642563049483"},
	Decimal {"62467221648435076201727918039944693004732956340691"},
	Decimal {"15732444386908125794514089057706229429197107928209"},
	Decimal {"55037687525678773091862540744969844508330393682126"},
	Decimal {"18336384825330154686196124348767681297534375946515"},
	Decimal {"80386287592878490201521685554828717201219257766954"},
	Decimal {"78182833757993103614740356856449095527097864797581"},
	Decimal {"16726320100436897842553539920931837441497806860984"},
	Decimal {"48403098129077791799088218795327364475675590848030"},
	Decimal {"87086987551392711854517078544161852424320693150332"},
	Decimal {"59959406895756536782107074926966537676326235447210"},
	Decimal {"69793950679652694742597709739166693763042633987085"},
	Decimal {"41052684708299085211399427365734116182760315001271"},
	Decimal {"65378607361501080857009149939512557028198746004375"},
	Decimal {"35829035317434717326932123578154982629742552737307"},
	Decimal {"94953759765105305946966067683156574377167401875275"},
	Decimal {"88902802571733229619176668713819931811048770190271"},
	Decimal {"25267680276078003013678680992525463401061632866526"},
	Decimal {"36270218540497705585629946580636237993140746255962"},
	Decimal {"24074486908231174977792365466257246923322810917141"},
	Decimal {"91430288197103288597806669760892938638285025333403"},
	Decimal {"34413065578016127815921815005561868836468420090470"},
	Decimal {"23053081172816430487623791969842487255036638784583"},
	Decimal {"11487696932154902810424020138335124462181441773470"},
	Decimal {"63783299490636259666498587618221225225512486764533"},
	Decimal {"67720186971698544312419572409913959008952310058822"},
	Decimal {"95548255300263520781532296796249481641953868218774"},
	Decimal {"76085327132285723110424803456124867697064507995236"},
	Decimal {"37774242535411291684276865538926205024910326572967"},
	Decimal {"23701913275725675285653248258265463092207058596522"},
	Decimal {"29798860272258331913126375147341994889534765745501"},
	Decimal {"18495701454879288984856827726077713721403798879715"},
	Decimal {"38298203783031473527721580348144513491373226651381"},
	Decimal {"34829543829199918180278916522431027392251122869539"},
	Decimal {"40957953066405232632538044100059654939159879593635"},
	Decimal {"29746152185502371307642255121183693803580388584903"},
	Decimal {"41698116222072977186158236678424689157993532961922"},
	Decimal {"62467957194401269043877107275048102390895523597457"},
	Decimal {"23189706772547915061505504953922979530901129967519"},
	Decimal {"86188088225875314529584099251203829009407770775672"},
	Decimal {"11306739708304724483816533873502340845647058077308"},
	Decimal {"82959174767140363198008187129011875491310547126581"},
	Decimal {"97623331044818386269515456334926366572897563400500"},
	Decimal {"42846280183517070527831839425882145521227251250327"},
	Decimal {"55121603546981200581762165212827652751691296897789"},
	Decimal {"32238195734329339946437501907836945765883352399886"},
	Decimal {"75506164965184775180738168837861091527357929701337"},
	Decimal {"62177842752192623401942399639168044983993173312731"},
	Decimal {"32924185707147349566916674687634660915035914677504"},
	Decimal {"99518671430235219628894890102423325116913619626622"},
	Decimal {"73267460800591547471830798392868535206946944540724"},
	Decimal {"76841822524674417161514036427982273348055556214818"},
	Decimal {"97142617910342598647204516893989422179826088076852"},
	Decimal {"87783646182799346313767754307809363333018982642090"},
	Decimal {"10848802521674670883215120185883543223812876952786"},
	Decimal {"71329612474782464538636993009049310363619763878039"},
	Decimal {"62184073572399794223406235393808339651327408011116"},
	Decimal {"66627891981488087797941876876144230030984490851411"},
	Decimal {"60661826293682836764744779239180335110989069790714"},
	Decimal {"85786944089552990653640447425576083659976645795096"},
	Decimal {"66024396409905389607120198219976047599490197230297"},
	Decimal {"64913982680032973156037120041377903785566085089252"},
	Decimal {"16730939319872750275468906903707539413042652315011"},
	Decimal {"94809377245048795150954100921645863754710598436791"},
	Decimal {"78639167021187492431995700641917969777599028300699"},
	Decimal {"15368713711936614952811305876380278410754449733078"},
	Decimal {"40789923115535562561142322423255033685442488917353"},
	Decimal {"44889911501440648020369068063960672322193204149535"},
	Decimal {"41503128880339536053299340368006977710650566631954"},
	Decimal {"81234880673210146739058568557934581403627822703280"},
	Decimal {"82616570773948327592232845941706525094512325230608"},
	Decimal {"22918802058777319719839450180888072429661980811197"},
	Decimal {"77158542502016545090413245809786882778948721859617"},
	Decimal {"72107838435069186155435662884062257473692284509516"},
	Decimal {"20849603980134001723930671666823555245252804609722"},
	Decimal {"53503534226472524250874054075591789781264330331690"},
};

int main() {
	Decimal sum = std::reduce(
		data.begin(), data.end(), Decimal {},
		[](Decimal a, Decimal b) -> Decimal {
			const auto size = std::max(a.size(), b.size());
			auto result = Decimal {};
			auto carry = std::vector<unsigned> (size+1, 0);
			for (std::size_t i=0; i<size; i++) {
				unsigned n = (i < a.size()? a[i]: 0)
				+            (i < b.size()? b[i]: 0)
				+            carry[i];
				result.push_back(n%10);
				carry[i+1] += n/10;
			}
			if (carry.back()) result.push_back(carry.back());
			return result;
		}
	);

	// Print.
	for (std::size_t i=0; i<10; i++) {
		std::cout << char (*std::next(sum.rbegin(), i) + '0');
	}
	std::cout << "\n";
}
